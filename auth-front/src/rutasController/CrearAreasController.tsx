// üìå Archivo: CrearAreasController.tsx (Controlador)
// üîπ Este archivo act√∫a como el intermediario entre el frontend y el backend para la creaci√≥n de √°reas.
// üîπ Recibe los datos desde `CrearAreas.tsx`, los valida y los env√≠a al backend mediante una petici√≥n `POST`.
// üîπ Si la respuesta del backend es v√°lida, devuelve la nueva √°rea creada a `CrearAreas.tsx` para que pueda mostrarla en la lista de √°reas disponibles.

// Importamos la URL base de la API
import { API_URL } from "../auth/authConstants"; // ‚úÖ Esto obtiene la URL base del backend, definida en otro archivo.

export const crearArea = async (data: { nombre_area: string; id_empresa: string | number }) => {
  // üîπ Esta funci√≥n es as√≠ncrona porque realiza una petici√≥n HTTP.
  
  try {
    if (!data || typeof data !== "object") {
      throw new Error("‚ùå Los datos enviados no son un JSON v√°lido.");
    }

    // Extraemos los valores desde `data`
    let { nombre_area, id_empresa } = data;

    // Convertir `id_empresa` a n√∫mero si es un string
    if (typeof id_empresa === "string") {
      id_empresa = Number(id_empresa); // Convertimos a n√∫mero
    }

    // Validamos los datos antes de enviarlos al backend
    if (!nombre_area || typeof nombre_area !== "string" || nombre_area.trim() === "") {
      throw new Error("‚ùå El campo 'nombre_area' no es v√°lido.");
    }

    if (!id_empresa || typeof id_empresa !== "number" || isNaN(id_empresa)) {
      throw new Error("‚ùå El campo 'id_empresa' no es v√°lido.");
    }

    // Enviamos los datos al backend mediante una petici√≥n `POST`
    const response = await fetch(`${API_URL}/CrearArea`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ nombre_area, id_empresa }),
    });

    // Si la respuesta no es exitosa, lanzamos un error con el mensaje del backend
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`‚ùå Error en el servidor (${response.status}): ${JSON.stringify(errorData)}`);
    }

    // Obtenemos la respuesta del backend
    const result = await response.json();

    if (!result || typeof result !== "object") {
      throw new Error("‚ùå La respuesta del servidor no es v√°lida.");
    }

    // Si todo sali√≥ bien, devolvemos la respuesta al frontend
    return result; // Devolvemos la nueva √°rea creada a `CrearAreas.tsx` para que se actualice en la lista
  } catch (error) {
    // Si ocurre un error en cualquier parte del proceso, se captura aqu√≠ y se muestra en consola.
    throw error; // Relanzamos el error para que `CrearAreas.tsx` pueda manejarlo en su `catch`
  }
};
